// README.sass

// Introduction
// =============================================================================
// This README provides information about lists in Python, including their
// definition, creation, manipulation, and built-in functions/methods.

// List Definition
// =============================================================================
// Lists in Python are ordered collections of elements. They are mutable, which
// means their contents can be altered after creation. Lists can store
// heterogeneous data, meaning elements of different data types. They are
// enclosed in square brackets [] and elements are separated by commas.

// Creating Lists
// =============================================================================
// Lists can be created with homogeneous or heterogeneous data:

a: 1, 2, 3, 4, 5 // Homogeneous list
a: 1, "ram", 's', true, 5.009, 1000223 // Heterogeneous list

// Accessing List Elements
// =============================================================================
// Elements in a list can be accessed using indexing:

a[1] // Accessing the second element in the list

// Built-in Functions and Methods
// =============================================================================
// Python provides various built-in functions and methods to work with lists:

// Examples of built-in functions:
length(a)
max(a)
min(a)
sum(a)
sorted(a)
reversed(a)
any(a)
all(a)
enumerate(a)

// Examples of list methods:
a.append("kavi")
a.insert(2, "tamil")
a.extend(a1)
a.remove('tamil')
a.pop()
del a[3:17]
a.clear()

// List Comprehension
// =============================================================================
// List comprehension provides a concise way to create lists:

square_value = [i**2 for i in range(0, 21)]

// Generator Expression
// =============================================================================
// Generator expression is similar to list comprehension but produces values
// on-the-fly:

new_list = (i * 10 for i in a)

// Filtering
// =============================================================================
// Filtering can be done using lambda functions and the filter function:

even = filter(lambda x: x % 2 == 0, a)
odd = filter(lambda x: x % 2 != 0, a)

// Reducing
// =============================================================================
// Reduction can be done using the reduce function from the functools module:

product = reduce(lambda x, y: x * y, a)

// Mapping
// =============================================================================
// Mapping can be done using lambda functions and the map function:

a1 = map(lambda x: x * 2, a)

//![](02.YouTube_Tutorial\List\Untitled.png)